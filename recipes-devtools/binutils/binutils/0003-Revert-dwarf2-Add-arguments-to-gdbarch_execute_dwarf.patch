From 3ca06c21d9f057f6fc560b9e785c430dad5a40df Mon Sep 17 00:00:00 2001
From: Evgeniy Didin <Evgeniy.Didin@synopsys.com>
Date: Mon, 1 Jun 2020 22:12:53 +0300
Subject: [PATCH 3/3] Revert "dwarf2: Add arguments to
 gdbarch_execute_dwarf_cfa_vendor_op"

This reverts commit f99033ed35cba42fe51acb55681a4b8744940ddc.
---
 gdb/arch-utils.c   | 3 +--
 gdb/arch-utils.h   | 4 +---
 gdb/dwarf2/frame.c | 3 +--
 gdb/gdbarch.c      | 4 ++--
 gdb/gdbarch.h      | 4 ++--
 gdb/gdbarch.sh     | 2 +-
 gdb/sparc-tdep.c   | 4 +---
 7 files changed, 9 insertions(+), 15 deletions(-)

diff --git a/gdb/arch-utils.c b/gdb/arch-utils.c
index 377bbeb64e8..04955ea847b 100644
--- a/gdb/arch-utils.c
+++ b/gdb/arch-utils.c
@@ -179,8 +179,7 @@ default_adjust_dwarf2_line (CORE_ADDR addr, int rel)
 
 bool
 default_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdb_byte op,
-				     struct dwarf2_frame_state *fs, const gdb_byte **insn_ptr,
-				     const gdb_byte *insn_end)
+				     struct dwarf2_frame_state *fs)
 {
   return false;
 }
diff --git a/gdb/arch-utils.h b/gdb/arch-utils.h
index b94e1966398..43d64b1f4f2 100644
--- a/gdb/arch-utils.h
+++ b/gdb/arch-utils.h
@@ -116,9 +116,7 @@ CORE_ADDR default_adjust_dwarf2_line (CORE_ADDR addr, int rel);
 /* Default DWARF vendor CFI handler.  */
 
 bool default_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdb_byte op,
-					  struct dwarf2_frame_state *fs,
-					  const gdb_byte **insn_ptr,
-					  const gdb_byte *insn_end);
+					  struct dwarf2_frame_state *fs);
 
 /* Version of cannot_fetch_register() / cannot_store_register() that
    always fails.  */
diff --git a/gdb/dwarf2/frame.c b/gdb/dwarf2/frame.c
index 5badf5f54a2..74488f9a8aa 100644
--- a/gdb/dwarf2/frame.c
+++ b/gdb/dwarf2/frame.c
@@ -597,8 +597,7 @@ bad CFI data; mismatched DW_CFA_restore_state at %s"),
 	      if (insn >= DW_CFA_lo_user && insn <= DW_CFA_hi_user)
 		{
 		  /* Handle vendor-specific CFI for different architectures.  */
-		  if (!gdbarch_execute_dwarf_cfa_vendor_op (gdbarch, insn, fs,
-							    &insn_ptr, insn_end))
+		  if (!gdbarch_execute_dwarf_cfa_vendor_op (gdbarch, insn, fs))
 		    error (_("Call Frame Instruction op %d in vendor extension "
 			     "space is not handled on this architecture."),
 			   insn);
diff --git a/gdb/gdbarch.c b/gdb/gdbarch.c
index f908ebaa9c5..e7d4ccca9e7 100644
--- a/gdb/gdbarch.c
+++ b/gdb/gdbarch.c
@@ -3555,13 +3555,13 @@ set_gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch,
 }
 
 bool
-gdbarch_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdb_byte op, struct dwarf2_frame_state *fs, const gdb_byte **insn_ptr, const gdb_byte *insn_end)
+gdbarch_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdb_byte op, struct dwarf2_frame_state *fs)
 {
   gdb_assert (gdbarch != NULL);
   gdb_assert (gdbarch->execute_dwarf_cfa_vendor_op != NULL);
   if (gdbarch_debug >= 2)
     fprintf_unfiltered (gdb_stdlog, "gdbarch_execute_dwarf_cfa_vendor_op called\n");
-  return gdbarch->execute_dwarf_cfa_vendor_op (gdbarch, op, fs, insn_ptr, insn_end);
+  return gdbarch->execute_dwarf_cfa_vendor_op (gdbarch, op, fs);
 }
 
 void
diff --git a/gdb/gdbarch.h b/gdb/gdbarch.h
index e4fbd695ef0..6dbb9d571dd 100644
--- a/gdb/gdbarch.h
+++ b/gdb/gdbarch.h
@@ -872,8 +872,8 @@ extern void set_gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarc
 /* Execute vendor-specific DWARF Call Frame Instruction.  OP is the instruction.
    FS are passed from the generic execute_cfa_program function. */
 
-typedef bool (gdbarch_execute_dwarf_cfa_vendor_op_ftype) (struct gdbarch *gdbarch, gdb_byte op, struct dwarf2_frame_state *fs, const gdb_byte **insn_ptr, const gdb_byte *insn_end);
-extern bool gdbarch_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdb_byte op, struct dwarf2_frame_state *fs, const gdb_byte **insn_ptr, const gdb_byte *insn_end);
+typedef bool (gdbarch_execute_dwarf_cfa_vendor_op_ftype) (struct gdbarch *gdbarch, gdb_byte op, struct dwarf2_frame_state *fs);
+extern bool gdbarch_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdb_byte op, struct dwarf2_frame_state *fs);
 extern void set_gdbarch_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdbarch_execute_dwarf_cfa_vendor_op_ftype *execute_dwarf_cfa_vendor_op);
 
 /* Return the appropriate type_flags for the supplied address class.
diff --git a/gdb/gdbarch.sh b/gdb/gdbarch.sh
index 0862877f28e..5a39dec83da 100755
--- a/gdb/gdbarch.sh
+++ b/gdb/gdbarch.sh
@@ -726,7 +726,7 @@ F;int;address_class_type_flags;int byte_size, int dwarf2_addr_class;byte_size, d
 M;const char *;address_class_type_flags_to_name;int type_flags;type_flags
 # Execute vendor-specific DWARF Call Frame Instruction.  OP is the instruction.
 # FS are passed from the generic execute_cfa_program function.
-m;bool;execute_dwarf_cfa_vendor_op;gdb_byte op, struct dwarf2_frame_state *fs, const gdb_byte **insn_ptr, const gdb_byte *insn_end;op, fs, insn_ptr, insn_end;;default_execute_dwarf_cfa_vendor_op;;0
+m;bool;execute_dwarf_cfa_vendor_op;gdb_byte op, struct dwarf2_frame_state *fs;op, fs;;default_execute_dwarf_cfa_vendor_op;;0
 
 # Return the appropriate type_flags for the supplied address class.
 # This function should return 1 if the address class was recognized and
diff --git a/gdb/sparc-tdep.c b/gdb/sparc-tdep.c
index 910487b01b9..a0c41722440 100644
--- a/gdb/sparc-tdep.c
+++ b/gdb/sparc-tdep.c
@@ -1592,9 +1592,7 @@ sparc32_dwarf2_frame_init_reg (struct gdbarch *gdbarch, int regnum,
 
 static bool
 sparc_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdb_byte op,
-				   struct dwarf2_frame_state *fs,
-				   const gdb_byte **insn_ptr,
-				   const gdb_byte *insn_end)
+				   struct dwarf2_frame_state *fs)
 {
   /* Only DW_CFA_GNU_window_save is expected on SPARC.  */
   if (op != DW_CFA_GNU_window_save)
-- 
2.16.2

